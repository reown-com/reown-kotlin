name: E2E Tests with Maestro

on:
  pull_request:
    types:
      - opened
      - synchronize
      - edited
  workflow_dispatch:

jobs:
  build_internal_samples:
    strategy:
      matrix:
        conf: [
          { name: wallet, command: ":sample:wallet:assembleInternal" },
          { name: dapp, command: ":sample:dapp:assembleInternal" },
        ]
    name: Build Internal ${{ matrix.conf.name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          architecture: x86_64
          cache: 'gradle'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Required files to build samples
        with:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          FIREBASE_SERVICE_CREDENTIALS: ${{ secrets.FIREBASE_SERVICE_CREDENTIALS }}
          SECRETS_PROPERTIES: ${{ secrets.SECRETS_PROPERTIES }}
          ENCODED_STRING_DEBUG: ${{ secrets.WC_KOTLIN_DEBUG_KEYSTORE }}
          SIGNING_KEY_STORE_PATH_DEBUG: ${{ secrets.WC_KOTLIN_DEBUG_KEYSTORE_PATH }}
          ENCODED_STRING_INTERNAL: ${{ secrets.WC_KOTLIN_INTERNAL_KEYSTORE }}
          SIGNING_KEY_STORE_PATH_INTERNAL: ${{ secrets.WC_KOTLIN_INTERNAL_KEYSTORE_PATH }}
          ENCODED_STRING_UPLOAD: ${{ secrets.WC_KOTLIN_UPLOAD_KEYSTORE }}
          SIGNING_KEY_STORE_PATH_UPLOAD: ${{ secrets.WC_KOTLIN_UPLOAD_KEYSTORE_PATH }}
        uses: ./.github/actions/ci_setup

      - name: Build sample - Internal
        env:
          WC_CLOUD_PROJECT_ID: ${{ secrets.WC_CLOUD_PROJECT_ID }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          NOTIFY_INTEGRATION_TESTS_PROJECT_ID: ${{ secrets.NOTIFY_INTEGRATION_TESTS_PROJECT_ID }}
          NOTIFY_INTEGRATION_TESTS_SECRET: ${{ secrets.NOTIFY_INTEGRATION_TESTS_SECRET }}
          MIX_PANEL: ${{ secrets.MIX_PANEL }}
        run: |
          ./gradlew ${{ matrix.conf.command }}

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.conf.name }}-apk
          path: sample/${{ matrix.conf.name }}/build/outputs/apk/internal/*.apk
          retention-days: 1

  run_e2e_tests:
    name: Run E2E Tests
    timeout-minutes: 30  # Increased timeout
    runs-on: ubuntu-16core
    needs: build_internal_samples
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download all APKs
        uses: actions/download-artifact@v4
        with:
          pattern: "*-apk"
          path: apks
          merge-multiple: true

      - name: List APKs
        run: |
          echo "Available APKs:"
          find apks -name "*.apk" | xargs ls -la

      - name: Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$PATH":"$HOME/.maestro/bin"
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          maestro --version

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Start Android Emulator and Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30  # Changed from 33 for better stability
          target: google_apis
          arch: x86_64
          ram-size: 4096M  # Increased RAM
          heap-size: 512M  # Added heap size
          emulator-boot-timeout: 900  # Increased timeout
          profile: pixel_6  # Changed from pixel_7
          avd-name: test_device
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot-save -no-snapshot-load
          disable-animations: true
          pre-emulator-launch-script: |
            echo "Running pre emulator launch script. Printing the working directory now:"
            pwd
          script: |
            # Verify emulator is running
            echo "Waiting for emulator to be ready..."
            adb wait-for-device
            adb devices
            
            # Wait for boot completion
            while [ "$(adb shell getprop sys.boot_completed | tr -d '\r')" != "1" ]; do
              echo "Waiting for boot completion..."
              sleep 5
            done
            
            echo "Emulator booted successfully"
            
            # Install APKs
            echo "Installing APKs:"
            find apks -name "*.apk" -exec echo "Installing: {}" \; -exec adb install -r {} \;
            
            # Verify installations
            echo "Verifying installed apps:"
            adb shell pm list packages | grep -E "com.reown.sample.(wallet|dapp).internal" || {
              echo "ERROR: Apps not installed correctly"
              adb shell pm list packages
              exit 1
            }
            
            # Clear app data
            echo "Clearing app data..."
            adb shell pm clear com.reown.sample.wallet.internal || true
            adb shell pm clear com.reown.sample.dapp.internal || true
            
            # Wait for system to settle
            sleep 10
            
            # Function to capture debug info
            capture_debug_info() {
              local step_name=$1
              echo "Capturing debug info for: $step_name"
              adb shell screencap /sdcard/${step_name}.png
              adb pull /sdcard/${step_name}.png || true
              adb shell dumpsys window | grep -E 'mCurrentFocus|mFocusedApp' || true
              adb logcat -d -t 100 | grep -E "ActivityManager|System.err|AndroidRuntime" || true
            }
            
            # Test manual app launch
            echo "Testing wallet app launch..."
            adb shell am start -n com.reown.sample.wallet.internal/.MainActivity
            sleep 8
            capture_debug_info "wallet_launch"
            
            # Check for crashes
            if adb logcat -d | grep -E "FATAL EXCEPTION|AndroidRuntime.*com.reown.sample.wallet"; then
              echo "ERROR: Wallet app crashed on launch"
              adb logcat -d | grep -A 20 -B 5 "FATAL EXCEPTION"
              exit 1
            fi
            
            # Kill app before tests
            adb shell am force-stop com.reown.sample.wallet.internal
            sleep 2
            
            # Run Maestro tests with debug mode
            echo "Running Maestro native to native tests:"
            
            # Run each test with error handling
            for test_file in connect_reject.yaml connect_confirm.yaml personal_sign_reject.yaml personal_sign_confirm.yaml; do
              echo "Running test: $test_file"
              maestro test --debug .maestro/flows/native/$test_file || {
                echo "Test $test_file failed"
                capture_debug_info "failed_${test_file%.*}"
                # Continue with other tests instead of failing immediately
                # exit 1
              }
              sleep 5  # Wait between tests
            done

      - name: Collect debug artifacts
        if: always()
        run: |
          mkdir -p debug-artifacts
          find . -name "*.png" -type f -exec cp {} debug-artifacts/ \; || true
          adb logcat -d > debug-artifacts/logcat.txt || true

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: debug-artifacts/
          if-no-files-found: warn

      - name: Find video files in project root
        if: always()
        run: |
          echo "Looking for video files in project root:"
          find . -maxdepth 1 -type f -name "*.mp4" -o -name "*.mov"
          
          # Create videos directory if it doesn't exist
          mkdir -p videos
          
          # Move any video files from root to videos directory
          find . -maxdepth 1 -type f \( -name "*.mp4" -o -name "*.mov" \) -exec mv {} videos/ \;

      - name: Upload test recordings from root
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-root-recordings
          path: |
            videos/
            *.mp4
            *.mov
          if-no-files-found: warn

      - name: Upload test recordings from .maestro
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-videos
          path: .maestro/videos/
          if-no-files-found: warn