name: E2E Tests with Maestro

on:
  pull_request:
    types:
      - opened
      - synchronize
      - edited
  workflow_dispatch:

jobs:
  build_internal_samples:
    strategy:
      matrix:
        conf: [
          { name: wallet, command: ":sample:wallet:assembleInternal" },
          { name: dapp, command: ":sample:dapp:assembleInternal" },
        ]
    name: Build Internal ${{ matrix.conf.name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          architecture: x86_64
          cache: 'gradle'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Required files to build samples
        with:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          FIREBASE_SERVICE_CREDENTIALS: ${{ secrets.FIREBASE_SERVICE_CREDENTIALS }}
          SECRETS_PROPERTIES: ${{ secrets.SECRETS_PROPERTIES }}
          ENCODED_STRING_DEBUG: ${{ secrets.WC_KOTLIN_DEBUG_KEYSTORE }}
          SIGNING_KEY_STORE_PATH_DEBUG: ${{ secrets.WC_KOTLIN_DEBUG_KEYSTORE_PATH }}
          ENCODED_STRING_INTERNAL: ${{ secrets.WC_KOTLIN_INTERNAL_KEYSTORE }}
          SIGNING_KEY_STORE_PATH_INTERNAL: ${{ secrets.WC_KOTLIN_INTERNAL_KEYSTORE_PATH }}
          ENCODED_STRING_UPLOAD: ${{ secrets.WC_KOTLIN_UPLOAD_KEYSTORE }}
          SIGNING_KEY_STORE_PATH_UPLOAD: ${{ secrets.WC_KOTLIN_UPLOAD_KEYSTORE_PATH }}
        uses: ./.github/actions/ci_setup

      - name: Build sample - Internal
        env:
          WC_CLOUD_PROJECT_ID: ${{ secrets.WC_CLOUD_PROJECT_ID }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          NOTIFY_INTEGRATION_TESTS_PROJECT_ID: ${{ secrets.NOTIFY_INTEGRATION_TESTS_PROJECT_ID }}
          NOTIFY_INTEGRATION_TESTS_SECRET: ${{ secrets.NOTIFY_INTEGRATION_TESTS_SECRET }}
          MIX_PANEL: ${{ secrets.MIX_PANEL }}
        run: |
          ./gradlew ${{ matrix.conf.command }}

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.conf.name }}-apk
          path: sample/${{ matrix.conf.name }}/build/outputs/apk/internal/*.apk
          retention-days: 1

  run_e2e_tests:
    name: Run E2E Tests
    timeout-minutes: 30
    runs-on: ubuntu-16core
    needs: build_internal_samples
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download all APKs
        uses: actions/download-artifact@v4
        with:
          pattern: "*-apk"
          path: apks
          merge-multiple: true

      - name: List APKs
        run: |
          echo "Available APKs:"
          find apks -name "*.apk" | xargs ls -la

      - name: Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$PATH":"$HOME/.maestro/bin"
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          maestro --version

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Start Android Emulator and Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          ram-size: 4096M
          heap-size: 576M
          emulator-boot-timeout: 900
          profile: pixel_6
          avd-name: test_device
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot-save -no-snapshot-load
          disable-animations: true
          pre-emulator-launch-script: |
            echo "Running pre emulator launch script"
            pwd
          script: |
            # Setup debug directory
            mkdir -p debug-artifacts
            
            # Wait for emulator to be fully ready
            echo "Waiting for emulator to be ready..."
            adb wait-for-device
            
            # Wait for boot completion
            while [ "$(adb shell getprop sys.boot_completed | tr -d '\r')" != "1" ]; do
              echo "Waiting for boot completion..."
              sleep 5
            done
            
            echo "Emulator booted successfully"
            adb devices
            
            # Clear logcat before we start
            adb logcat -c
            
            # Start logcat capture in background
            adb logcat > debug-artifacts/full-logcat.txt &
            LOGCAT_PID=$!
            
            # Install APKs
            echo "Installing APKs:"
            find apks -name "*.apk" -exec echo "Installing: {}" \; -exec adb install -r {} \;
            
            # Verify installations
            echo "Verifying installed apps:"
            adb shell pm list packages | grep -E "com.reown.sample" || {
              echo "ERROR: Apps not installed correctly"
              exit 1
            }
            
            # Check APK info
            echo "Checking APK details:"
            adb shell dumpsys package com.reown.sample.wallet.internal | grep -A 5 "versionName"
            
            # Clear app data
            echo "Clearing app data..."
            adb shell pm clear com.reown.sample.wallet.internal || true
            adb shell pm clear com.reown.sample.dapp.internal || true
            
            # Wait for system to settle
            sleep 10
            
            # Check available activities
            echo "Checking available activities for wallet app:"
            adb shell dumpsys package com.reown.sample.wallet.internal | grep -A 10 "Activity" || true
            
#            # Try launching with different methods
#            echo "Testing app launch with am start..."
#            adb shell am start -n com.reown.sample.wallet.internal/.MainActivity -W || {
#              echo "Failed with MainActivity, trying other activities..."
#              # Try to find the launcher activity
#              LAUNCHER_ACTIVITY=$(adb shell cmd package resolve-activity -c android.intent.category.LAUNCHER com.reown.sample.wallet.internal | grep name= | head -1 | cut -d'=' -f2)
#              echo "Found launcher activity: $LAUNCHER_ACTIVITY"
#              if [ ! -z "$LAUNCHER_ACTIVITY" ]; then
#                adb shell am start -n "$LAUNCHER_ACTIVITY" -W
#              fi
#            }
            
            # Wait and capture state
            sleep 10
            
            # Capture comprehensive debug info
            echo "=== CAPTURING DEBUG INFO ==="
            
#            # Screenshot
#            adb shell screencap /sdcard/app_launch.png
#            adb pull /sdcard/app_launch.png debug-artifacts/ || true
            
            # Window state
            echo "Window state:" > debug-artifacts/window_state.txt
            adb shell dumpsys window windows >> debug-artifacts/window_state.txt
            
            # Current activity
            echo "Current activity:" > debug-artifacts/current_activity.txt
            adb shell dumpsys activity activities | grep -E "mResumedActivity|mFocusedActivity" >> debug-artifacts/current_activity.txt
            
            # Check for crashes
            echo "Checking for crashes..."
            adb logcat -d | grep -E "FATAL EXCEPTION|AndroidRuntime|Process.*com.reown" > debug-artifacts/crashes.txt || echo "No crashes found" > debug-artifacts/crashes.txt
            
            # ANR traces
            adb shell ls /data/anr/ > debug-artifacts/anr_list.txt 2>&1 || true
            
            # Memory info
            adb shell dumpsys meminfo com.reown.sample.wallet.internal > debug-artifacts/meminfo.txt || true
            
            # App process info
            adb shell ps | grep reown > debug-artifacts/processes.txt || true
            
            # Network state (important for WalletConnect)
            echo "Network state:" > debug-artifacts/network_state.txt
            adb shell dumpsys connectivity >> debug-artifacts/network_state.txt
            adb shell settings get global airplane_mode_on >> debug-artifacts/network_state.txt
            
            # Force stop before Maestro tests
            adb shell am force-stop com.reown.sample.wallet.internal
            adb shell am force-stop com.reown.sample.dapp.internal
            sleep 5
            
#            # Set environment variables that might be needed by the app
#            export WC_CLOUD_PROJECT_ID="${{ secrets.WC_CLOUD_PROJECT_ID }}"
            
            # Run Maestro tests with extensive debugging
            echo "Running Maestro tests..."
            
#            # First, let's see what Maestro sees
#            maestro test --format junit --output debug-artifacts/maestro-report.xml .maestro/flows/native/connect_reject.yaml || {
#              echo "Test failed, capturing additional debug info..."
                    
#              # Get Maestro hierarchy
#              maestro hierarchy > debug-artifacts/maestro-hierarchy.txt || true
#            
#              # Try running with different wait strategy
#              echo "Retrying with longer timeouts..."
#              maestro test --debug --env APP_LAUNCH_TIMEOUT=60000 .maestro/flows/native/connect_reject.yaml || true
#            }
                    
            echo "Running Maestro native to native tests:"
            maestro test .maestro/flows/native/connect_reject.yaml
    #            maestro test .maestro/flows/native/connect_confirm.yaml
    #            maestro test .maestro/flows/native/personal_sign_reject.yaml
    #            maestro test .maestro/flows/native/personal_sign_confirm.yaml
            
            # Stop logcat capture
            kill $LOGCAT_PID || true
            
            # Filter logcat for relevant info
            grep -E "reown|WalletConnect|AndroidRuntime|System.err|ActivityManager" debug-artifacts/full-logcat.txt > debug-artifacts/filtered-logcat.txt || true

      - name: Analyze crash logs
        if: always()
        run: |
          if [ -f debug-artifacts/crashes.txt ] && [ -s debug-artifacts/crashes.txt ]; then
            echo "::error::App crashes detected:"
            cat debug-artifacts/crashes.txt
          fi
          
          if [ -f debug-artifacts/filtered-logcat.txt ]; then
            echo "Relevant log entries:"
            tail -n 100 debug-artifacts/filtered-logcat.txt
          fi

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: debug-artifacts/
          if-no-files-found: warn

      - name: Upload Maestro artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-artifacts
          path: |
            .maestro/
            videos/
            *.mp4
            *.mov
          if-no-files-found: warn