name: E2E Tests with Maestro

on:
  push:
    branches: [ feat/maestro ]
  workflow_dispatch:

jobs:
  build_internal_samples:
    strategy:
      matrix:
        conf: [
          { name: wallet, command: ":sample:wallet:assembleInternal" },
          { name: dapp, command: ":sample:dapp:assembleInternal" },
        ]
    name: Build Internal ${{ matrix.conf.name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          architecture: x86_64
          cache: 'gradle'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Required files to build samples
        with:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          FIREBASE_SERVICE_CREDENTIALS: ${{ secrets.FIREBASE_SERVICE_CREDENTIALS }}
          SECRETS_PROPERTIES: ${{ secrets.SECRETS_PROPERTIES }}
          ENCODED_STRING_DEBUG: ${{ secrets.WC_KOTLIN_DEBUG_KEYSTORE }}
          SIGNING_KEY_STORE_PATH_DEBUG: ${{ secrets.WC_KOTLIN_DEBUG_KEYSTORE_PATH }}
          ENCODED_STRING_INTERNAL: ${{ secrets.WC_KOTLIN_INTERNAL_KEYSTORE }}
          SIGNING_KEY_STORE_PATH_INTERNAL: ${{ secrets.WC_KOTLIN_INTERNAL_KEYSTORE_PATH }}
          ENCODED_STRING_UPLOAD: ${{ secrets.WC_KOTLIN_UPLOAD_KEYSTORE }}
          SIGNING_KEY_STORE_PATH_UPLOAD: ${{ secrets.WC_KOTLIN_UPLOAD_KEYSTORE_PATH }}
        uses: ./.github/actions/ci_setup

      - name: Build sample - Internal
        env:
          WC_CLOUD_PROJECT_ID: ${{ secrets.WC_CLOUD_PROJECT_ID }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          NOTIFY_INTEGRATION_TESTS_PROJECT_ID: ${{ secrets.NOTIFY_INTEGRATION_TESTS_PROJECT_ID }}
          NOTIFY_INTEGRATION_TESTS_SECRET: ${{ secrets.NOTIFY_INTEGRATION_TESTS_SECRET }}
          MIX_PANEL: ${{ secrets.MIX_PANEL }}
        run: |
          ./gradlew ${{ matrix.conf.command }}

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.conf.name }}-apk
          path: sample/${{ matrix.conf.name }}/build/outputs/apk/internal/*.apk
          retention-days: 1

  run_e2e_tests:
    name: Run E2E Tests
    timeout-minutes: 20
    runs-on: macos-latest-xlarge #macos-13-large (intel)
    needs: build_internal_samples
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download all APKs
        uses: actions/download-artifact@v4
        with:
          pattern: "*-apk"
          path: apks
          merge-multiple: true

      - name: List APKs
        run: |
          echo "Available APKs:"
          find apks -name "*.apk"

      - name: Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$PATH":"$HOME/.maestro/bin"
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          maestro --version

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Start Android Emulator and Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: arm64-v8a
          ram-size: 2048M
          emulator-boot-timeout: 600 # 10min
          profile: pixel_3a
          avd-name: test_device
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          #          disable-animations: true
          pre-emulator-launch-script: |
            echo "Running pre emulator launch script. Printing the working directory now:"
            pwd
          script: |
            echo "Listing available devices:"
            avdmanager list device
            
            echo "Listing available APKs:"
            find apks -name "*.apk"
            
            # verify emulator is running
            adb devices
            
            echo "Installing APKs:"
            find apks -name "*.apk" -exec adb install -r {} \;
            
            echo "Installed apps:"
            adb shell pm list packages
            
            echo "Running Maestro native to native tests:"
            maestro test .maestro/flows/native/connect_reject.yaml || echo "Test connect_reject failed but continuing"
#            maestro test .maestro/flows/native/connect_confirm.yaml || echo "Test connect_confirm failed but continuing"
#            maestro test .maestro/flows/native/personal_sign_reject.yaml || echo "Test sign_request_reject failed but continuing"
#            maestro test .maestro/flows/native/personal_sign_confirm.yaml || echo "Test sign_request_confirm failed but continuing"

#            echo "Running Maestro web to native tests:"
#            maestro test .maestro/flows/web/connect_reject.yaml || echo "Test web_connect_reject failed but continuing"
#            maestro test .maestro/flows/web/connect_confirm.yaml || echo "Test web_connect_confirm failed but continuing"

      - name: Find video files in project root
        if: always()
        run: |
          echo "Looking for video files in project root:"
          find . -maxdepth 1 -type f -name "*.mp4" -o -name "*.mov"
          
          # Create videos directory if it doesn't exist
          mkdir -p videos
          
          # Move any video files from root to videos directory
          find . -maxdepth 1 -type f \( -name "*.mp4" -o -name "*.mov" \) -exec mv {} videos/ \;

      - name: Upload test recordings from root
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-root-recordings
          path: |
            videos/
            *.mp4
            *.mov
          if-no-files-found: warn

      - name: Upload test recordings from .maestro
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-videos
          path: |
            .maestro/videos/
            if-no-files-found: warn